#!/bin/bash

# funcion usage para mostrar como se debe usar el prgrama
function usage() {
    echo "Usage: scdebug [-h] [-sto arg] [-v | -vall] [-nattch progtoattach] [prog [arg1 ...]]"
    echo "-h         Muestra esta salida de texto para ayudar."
    echo "-sto arg   Strace options con mas argumentos."
    echo "-nattch progtoattach   Hace un attach al programa indicado."
    exit 0
}

# Crea un directorio en acso de que no exista
function create_dir() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi
}

strace_options=""
programs_to_attach=()
pids_to_attach=()
program=""
args=()
consult=""
kill_procesos=""
while [ "$#" -gt 0 ]; do
    case "$1" in
        -sto)
            shift
            strace_options="$1"
            ;;

        -nattch)
            shift
            # Almacenar todos los programas a los que se hará attach en la lista.
            while [ -n "$1" ] && [ "$1" != "-"* ]; do
                programs_to_attach+=("$1")
                shift
            done
            ;;
        -pattch)
            shift
            # Almacenar todos los PIDs de procesos a los que se hará attach en la lista.
            while [ -n "$1" ] && [ "$1" != "-"* ]; do
                pids_to_attach+=("$1")
                shift
            done
            ;;
        -h)
            usage
            ;;
        -v)
            consult="unic"
            ;;
        -vall)
            consult="all"
            ;;
        -k | -kill)
            kill_procesos="yes"
            ;;
        *)
            if [ -z "$program" ]; then
                program="$1"
            else
                args+=("$1")
            fi
            ;;
    esac
    shift
done

# identificador unico para los txt
uuid=$(uuidgen)

# camino al directorio y nombre del txt
trace_dir=".scdebug/$program"
trace_file="$trace_dir/trace_$uuid.txt"

# se crea el directorio si no existe
create_dir "$trace_dir"

# Si la opción -nattch se utilizó con nombres de programas, hacer attach a los más recientes.
if [ "${#programs_to_attach[@]}" -gt 0 ]; then
    for program_to_attach in "${programs_to_attach[@]}"; do
        pid=$(pgrep -n "$program_to_attach")
        if [ -z "$pid" ]; then
            echo "No se encontró ningún proceso en ejecución con el nombre: $program_to_attach"
        else
            # Generar un nuevo identificador único para los archivos de traza.
            uuid=$(uuidgen)
            create_dir ".scdebug/$program_to_attach"
            trace_file=".scdebug/$program_to_attach/trace_{$program_to_attach}_$uuid.txt"
            strace_command="strace $strace_options -p $pid -o $trace_file"
            $strace_command &
            echo "Haciendo attach a $program_to_attach (PID: $pid) en segundo plano."
            echo "Archivo de traza: $trace_file"
            echo "Comando: $strace_command"
        fi
    done
fi

# Si la opción -pattch se utilizó con PIDs, hacer attach a los procesos y obtener los nombres.
if [ "${#pids_to_attach[@]}" -gt 0 ]; then
    for pid_to_attach in "${pids_to_attach[@]}"; do
        if [ -d "/proc/$pid_to_attach" ]; then
            program_name=$(cat "/proc/$pid_to_attach/comm")
            # Generar un nuevo identificador único para los archivos de traza.
            uuid=$(uuidgen)
            create_dir ".scdebug/$program_name"
            trace_file=".scdebug/$program_name/trace_${program_name}_$uuid.txt"
            strace_command="strace $strace_options -p $pid_to_attach -o $trace_file"
            $strace_command &
            echo "Haciendo attach al proceso $program_name (PID: $pid_to_attach) en segundo plano."
            echo "Archivo de traza: $trace_file"
            echo "Comando: $strace_command"
        else
            echo "No se encontró ningún proceso en ejecución con el PID: $pid_to_attach"
        fi
    done
fi

# Si la opción -v o -vall se utilizó, volcar la información de los archivos de depuración en la salida estándar.
if [ "$consult" == "all" ]; then
    # Volcar información de todos los programas en el directorio de trazas.
    tracefiles=$(ls -t $trace_dir)
    if [ -n "$tracefiles" ]; then
        for tracef in $tracefiles; do
            echo "=============== COMANDO: $program ==============================================="
            echo "=============== ARCHIVO DE TRAZA: $tracef ========================================"
            echo "=============== HORA: $(stat -c %y "$trace_dir/$tracef")=============="
            cat "$trace_dir/$tracef" >> "$trace_file"
        done
    else
        echo "No se encontraron trazas para ningún programa."
    fi
elif [ "$consult" == "unic" ]; then
    # Volcar información del último programa en el directorio de trazas.
    last_tracef=$(ls -t $trace_dir | head -n 1)
    if [ -n "$last_tracef" ]; then
        echo "=============== COMANDO: $program ==============================================="
        echo "=============== ARCHIVO DE TRAZA: $last_tracef ========================================"
        echo "=============== HORA: $(stat -c %y "$trace_dir/$last_tracef")=============="
        cat "$trace_dir/$last_tracef" >> "$trace_file"
    else
        echo "No se encontraron trazas para ningún programa."
    fi
elif [ "$consult" == "" ]; then
    echo "Procesos en ejecución del usuario $USER:"
    # Listar los procesos del usuario
    ps -u "$USER" -o pid,ppid,user,comm,start --sort=start
    # Obtener información de trazado (tracer) si está presente
    for pid in $(ps -u "$USER" -o pid --no-headers); do
        if [ -d "/proc/$pid" ]; then
            tracer_pid=$(awk '/TracerPid/ {print $2}' /proc/$pid/status 2>/dev/null)
            if [ -n "$tracer_pid" ] && [ "$tracer_pid" -ne 0 ]; then
                tracer_name=$(ps -o comm= -p $tracer_pid)
                echo "PID: $pid, Tracee: $(cat /proc/$pid/comm), Tracer PID: $tracer_pid, Tracer: $tracer_name"
            fi
        fi
    done
fi

if [ "$kill_processes" == "true" ]; then
    # Obtener la lista de PIDs de procesos del usuario
    user_processes=$(ps -u "$USER" -o pid --no-headers)

    for pid in $user_processes; do
        if [ -d "/proc/$pid" ]; then
            tracer_pid=$(awk '/TracerPid/ {print $2}' /proc/$pid/status 2>/dev/null)
            if [ "$tracer_pid" -ne 0 ]; then
                echo "Terminando proceso PID: $pid y proceso trazador PID: $tracer_pid"
                kill -9 "$pid" "$tracer_pid"
            fi
        fi
    done
    exit 0
fi


if [ "$strace_options" != "" ]; then
    strace_command="strace $strace_options -o $trace_file $program ${args[@]}"
else
    strace_command="strace -o $trace_file $program ${args[@]}"
fi 

# ejecutamos en segundo plano
$strace_command &

echo "Comando ejecutandose en segundo plano."
echo "Trace file: $trace_file"
echo "Commando: $strace_command"





