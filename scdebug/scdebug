#!/bin/bash

# funcion usage para mostrar como se debe usar el prgrama
function usage() {
    echo "Usage: scdebug [-h] [-sto arg] [-v | -vall] [-nattch progtoattach] [prog [arg1 ...]]"
    echo "-h         Muestra esta salida de texto para ayudar."
    echo "-sto arg   Strace options con mas argumentos."
    echo "-nattch progtoattach   Hace un attach al programa indicado."
    exit 0
}

# Crea un directorio en acso de que no exista
function create_dir() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi
}

strace_options=""
attach_program=""
program=""
args=()
consult=""
kill_procesos=""
while [ "$#" -gt 0 ]; do
    case "$1" in
        -sto)
            shift
            strace_options="$1"
            ;;

        -nattch)
            shift
            attach_program="$1"
            ;;
        -h)
            usage
            ;;
        -v)
            consult="unic"
            ;;
        -vall)
            consult="all"
            ;;
        -k | -kill)
            kill_procesos="yes"
            ;;
        *)
            if [ -z "$program" ]; then
                program="$1"
            else
                args+=("$1")
            fi
            ;;
    esac
    shift
done

# identificador unico para los txt
uuid=$(uuidgen)

# camino al directorio y nombre del txt
trace_dir=".scdebug/$program"
trace_file="$trace_dir/trace_$uuid.txt"

# se crea el directorio si no existe
create_dir "$trace_dir"

# Si se hace el attach a un programa, se busca el mas reciente
if [ -n "$attach_program" ]; then
    pid=$(pgrep -n "$attach_program")
    if [ -z "$pid" ]; then
        echo "No running process found with name: $attach_program"
        exit 1
    fi
    strace_command="strace $strace_options -p $pid -o $trace_file"
else
    strace_command="strace $strace_options -o $trace_file $program ${args[@]}"
fi

if [ "$consult" == "unic" ]; then
    last_tracef=$(ls -t $trace_dir | head -n 1)
    if [ -n $last_tracef ]; then
        echo "=============== COMMAND: $program ==============================================="
        echo "=============== TRACE FILE: $last_tracef ========================================"
        echo "=============== TIME: $(stat -c %y "$trace_dir/$latest_trace_file")=============="
 
    else
        echo "No se encontraron traces para $program"
    fi

elif [ "$consult" == "all" ]; then
    tracefiles=$(ls -t $trace_dir)
    if [ -n "$tracefiles" ]; then
        for tracef in $tracefiles; do
            echo "=============== COMMAND: $program ==============================================="
            echo "=============== TRACE FILE: $tracef ========================================"
            echo "=============== TIME: $(stat -c %y "$trace_dir/$tracef")=============="
        done
    else
        echo "No se encontraron traces para $program"
    fi
elif [ "$consult" == "" ]; then
    echo "Procesos en ejecución del usuario $USER:"
    # Listar los procesos del usuario
    ps -u "$USER" -o pid,ppid,user,comm,start --sort=start
    # Obtener información de trazado (tracer) si está presente
    for pid in $(ps -u "$USER" -o pid --no-headers); do
        if [ -d "/proc/$pid" ]; then
            tracer_pid=$(awk '/TracerPid/ {print $2}' /proc/$pid/status 2>/dev/null)
            if [ -n "$tracer_pid" ] && [ "$tracer_pid" -ne 0 ]; then
                tracer_name=$(ps -o comm= -p $tracer_pid)
                echo "PID: $pid, Tracee: $(cat /proc/$pid/comm), Tracer PID: $tracer_pid, Tracer: $tracer_name"
            fi
        fi
    done
    exit 0
fi

if [ "$kill_processes" == "true" ]; then
    # Obtener la lista de PIDs de procesos del usuario
    user_processes=$(ps -u "$USER" -o pid --no-headers)

    for pid in $user_processes; do
        if [ -d "/proc/$pid" ]; then
            tracer_pid=$(awk '/TracerPid/ {print $2}' /proc/$pid/status 2>/dev/null)
            if [ "$tracer_pid" -ne 0 ]; then
                echo "Terminando proceso PID: $pid y proceso trazador PID: $tracer_pid"
                kill -9 "$pid" "$tracer_pid"
            fi
        fi
    done
    exit 0
fi

# ejecutamos en segundo plano
$strace_command &

echo "Comando ejecutandose en segundo plano."
echo "Trace file: $trace_file"
echo "Commando: $strace_command"
