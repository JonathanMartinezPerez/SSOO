
#!./ptbash

# funcion usage para mostrar como se debe usar el prgrama
function usage() {
    echo "Usage: scdebug [-h] [-sto args] [-v | -vall] [-nattch progtoattach] [-pattch pidstoattch] [prog [arg1 ...]]"
    echo "Another Usage: scdebug [-h] [-k] -S commName prog [arg...]"
    echo "-h         Muestra esta salida de texto para ayudar."
    echo "-sto arg   Strace options con mas argumentos."
    echo "-nattch    progtoattach   Hace un attach al programa indicado."
    echo "-pattch    pidstoattch    Hace un attach al proceso indicado."
    echo "-v         Volcar el archivo mas reciente de los archivos de depuración en la salida estándar."
    echo "-vall      Volcar la información de todos los archivos de depuración en la salida estándar."
    exit 0
}

# Crea un directorio en acso de que no exista
function create_dir() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi
}

function killproc() {
    # Obtener la lista de PIDs de procesos del usuario
    user_processes=$(ps -u "$USER" -o pid --no-headers)
    processes_killed=false
    for pid in $user_processes; do
        if [ -d "/proc/$pid" ]; then
            tracer_pid=$(awk '/TracerPid/ {print $2}' /proc/$pid/status 2>/dev/null)
           if [[ "$tracer_pid" =~ ^[0-9]+$ ]] && [ "$tracer_pid" -ne 0 ]; then
                echo "Terminando proceso PID: $pid y proceso trazador PID: $tracer_pid"
                processes_killed=true
                kill -9 "$pid" "$tracer_pid"
            fi
        fi
    done
    if [ "$processes_killed" == false ]; then
            echo "no se encontro ningun procesos al que matar"
    fi
}

launch_strace() {
    strace_options="$1"
    trace_file="$2"
    pid_or_program="$3"
    args="$4"  # Agregamos un cuarto argumento para los argumentos del programa

    # Comprobar si pid_or_program es un número (PID) o un programa
    if [[ "$pid_or_program" =~ ^[0-9]+$ ]]; then
        strace_command="strace $strace_options -p $pid_or_program -o $trace_file"
    else
        strace_command="strace $strace_options -o $trace_file $pid_or_program ${args[@]}"
    fi

    # Ejecutar el comando strace
    $strace_command || {
        local exit_code="$?"
        echo "Error: strace exited with code $exit_code while tracing $pid_or_program" 1>&2
        echo "Error: strace exited with code $exit_code while tracing $pid_or_program" >> "$trace_file"
    }
}

strace_options=""
programs_to_attach=()
pids_to_attach=()
program=""
args=()
consult=""
kill_procesos=""
stop_signal=""
commName=""
monitoring=""
invert=""
while [ "$#" -gt 0 ]; do
    case "$1" in
        -sto)
            shift
            strace_options="$1"
            ;;

        -nattch)
            shift
            # Almacenar todos los programas a los que se hará attach en la lista.
            while [ -n "$1" ] && [ "$1" != "-"* ]; do
                programs_to_attach+=("$1")
                shift
            done
            ;;
        -pattch)
            shift
            # Almacenar todos los PIDs de procesos a los que se hará attach en la lista.
            while [ -n "$1" ] && [ "$1" != "-"* ]; do
                pids_to_attach+=("$1")
                shift
            done
            ;;
        -h)
            usage
            shift
            continue
            ;;
        -v)
            consult="unic"
            ;;
        -vall)
            consult="all"
            ;;
        -k | -kill)
            kill_procesos="yes"
            killproc
            shift
            continue
            ;;
        -S) 
            stop_signal="yes"
            shift
            commName="$1"
            shift
            program="$1"
            shift
            while [ -n "$1" ] && [ "$1" != "-"* ]; do
                args+=("$1")
                shift
            done
            ;;
        -g | -ge | -gc)
            monitoring="$1"
            ;;
        -inv)
            invert="yes"
            ;;
        *)
            if [ -z "$program" ]; then
                program="$1"
            else
                args+=("$1")
            fi
            ;;
    esac
    shift
done

# identificador unico para los txt
uuid=$(uuidgen)

# camino al directorio y nombre del txt
trace_dir=".scdebug/$program"
trace_file="$trace_dir/trace_$uuid.txt"

# Definir un archivo de log para redirigir la salida estándar y de error
log_file=".scdebug/trace_log_$uuid.txt"
# Redirigir la salida estándar y de error al archivo de log
exec > >(tee -a "$log_file") 2>&1

# se crea el directorio si no existe
create_dir "$trace_dir"

# Si no se incluyen ni -v ni -vall, mostrar los procesos en ejecución del usuario.
if [ "$consult" == "" ]  && [ "$stop_signal" != "yes" ] && [ "$monitoring" == "" ]; then
    echo "Procesos en ejecución del usuario $USER:"
    # Listar los procesos del usuario
    ps -u "$USER" -o pid,ppid,user,comm,start --sort=start
    # Obtener información de trazado (tracer) si está presente
    for pid in $(ps -u "$USER" -o pid --no-headers); do
        if [ -d "/proc/$pid" ]; then
            tracer_pid=$(awk '/TracerPid/ {print $2}' /proc/$pid/status 2>/dev/null)
            if [ -n "$tracer_pid" ] && [ "$tracer_pid" -ne 0 ]; then
                tracer_name=$(ps -o comm= -p $tracer_pid)
                echo "PID: $pid, Tracee: $(cat /proc/$pid/comm), Tracer PID: $tracer_pid, Tracer: $tracer_name"
            fi
        fi
    done
fi

# Si la opción -nattch se utilizó con nombres de programas, hacer attach a los más recientes.
if [ "${#programs_to_attach[@]}" -gt 0 ]; then
    for program_to_attach in "${programs_to_attach[@]}"; do
        pid=$(pgrep -n "$program_to_attach")
        if [ -z "$pid" ]; then
            echo "No se encontró ningún proceso en ejecución con el nombre: $program_to_attach"
        else
            # Generar un nuevo identificador único para los archivos de traza.
            uuid=$(uuidgen)
            create_dir ".scdebug/$program_to_attach"
            trace_file=".scdebug/$program_to_attach/trace_{$program_to_attach}_$uuid.txt"
            launch_strace "$strace_options" "$trace_file" "$pid" &
            echo "Haciendo attach a $program_to_attach (PID: $pid) en segundo plano."
            echo "Archivo de traza: $trace_file"
        fi
    done
fi

# Si la opción -pattch se utilizó con PIDs, hacer attach a los procesos y obtener los nombres.
if [ "${#pids_to_attach[@]}" -gt 0 ]; then
    for pid_to_attach in "${pids_to_attach[@]}"; do
        if [ -d "/proc/$pid_to_attach" ]; then
            program_name=$(cat "/proc/$pid_to_attach/comm")
            # Generar un nuevo identificador único para los archivos de traza.
            uuid=$(uuidgen)
            create_dir ".scdebug/$program_name"
            trace_file=".scdebug/$program_name/trace_${program_name}_$uuid.txt"
            launch_strace "$strace_options" "$trace_file" "$pid_to_attach" &
            echo "Haciendo attach al proceso $program_name (PID: $pid_to_attach) en segundo plano."
            echo "Archivo de traza: $trace_file"
        else
            echo "No se encontró ningún proceso en ejecución con el PID: $pid_to_attach"
        fi
    done
fi

# Si la opción -v o -vall se utilizó, volcar la información de los archivos de depuración en la salida estándar.
if [ "$consult" == "all" ]; then
    # Volcar información de todos los programas en el directorio de trazas.
    tracefiles=$(ls -t $trace_dir)
    if [ -n "$tracefiles" ]; then
        for tracef in $tracefiles; do
            echo "=============== COMANDO: $program ==============================================="
            echo "=============== ARCHIVO DE TRAZA: $tracef ========================================"
            echo "=============== HORA: $(stat -c %y "$trace_dir/$tracef")=============="
            file_volcado=".scdebug/$program/trace_volcado_$uuid.txt"
            echo "Archivo de volcado: $file_volcado"
            cat "$trace_dir/$tracef" >> "$file_volcado"
        done
    else
        echo "No se encontraron trazas para ningún programa."
    fi
elif [ "$consult" == "unic" ]; then
    # Volcar información del último programa en el directorio de trazas.
    last_tracef=$(ls -t $trace_dir | head -n 1)
    if [ -n "$last_tracef" ]; then
        echo "=============== COMANDO: $program ===============================================" 
        echo "=============== ARCHIVO DE TRAZA: $last_tracef ========================================"
        echo "=============== HORA: $(stat -c %y "$trace_dir/$last_tracef")=============="
        file_volcado=".scdebug/$program/trace_volcado_$uuid.txt"
        echo "$file_volcado"
        cat "$trace_dir/$last_tracef" >> "$file_volcado"
    else
        echo "No se encontraron trazas para ningún programa."
    fi
fi

if [ "$strace_options" != "" ] && [ "${#programs_to_attach[@]}" -eq 0 ] && [ "${#pids_to_attach[@]}" -eq 0 ]; then
    launch_strace "$strace_options" "$trace_file" "$program" "${args[@]}" &
    echo "Comando ejecutándose en segundo plano."
    echo "Trace file: $trace_file"
elif [ "$strace_options" == "" ] && [ "${#programs_to_attach[@]}" -eq 0 ] && [ "${#pids_to_attach[@]}" -eq 0 ] && [ "$kill_procesos" != "yes" ] && [ "$stop_signal" != "yes" ] && [ "$monitoring" == "" ]; then
    launch_strace "$strace_options" "$trace_file" "$program" "${args[@]}" &
    echo "Comando ejecutándose en segundo plano."
    echo "Trace file: $trace_file"
fi

if [ "$stop_signal" == "yes" ] && [ "${#programs_to_attach[@]}" -eq 0 ] && [ "${#pids_to_attach[@]}" -eq 0 ] && [ "$strace_options" == "" ] && [ "$consult" == "" ] ; then
    # Verificar que se proporcionó el nombre de comando y al menos un programa a ejecutar
    if [ -z "$commName" ]; then
        echo "Error: Debes proporcionar un nombre de comando y un programa a ejecutar." >&2
        usage
    fi

    # Forzar el nombre de comando
    echo -n "traced_$commName" > /proc/$$/comm
    echo "strace "$program" "${args[@]}""
    # Detener el script actual
    kill -SIGSTOP $$

    # Ejecutar el programa especificado
    LaunchProg=("./strace" "$program" "${args[@]}")
    echo "Ejecutando: ${LaunchProg[@]}"
    exec "${LaunchProg[@]}" >> "$trace_file" 2>&1
fi









if [ "$monitoring" != "" ]; then
    stopped_pids=($(ps -u "$USER" | awk '$NF ~ /^traced/ {print $1}'))
    if [ ${#stopped_pids[@]} -eq 0 ]; then
        echo "No se encontraron procesos detenidos con nombres que comienzan por 'traced_'."
    fi

    # Inicializar variables para la tabla de datos
    data_table=""
    max_time_column="Max-Time"
    total_time_column="Total-Time"
    calls_column="Calls"
    errs_column="Errors"
    sorted_column="Calls"
    sort_order="asc"

    if [ "$monitoring" == "-gc" ]; then
        sorted_column="$calls_column"
    elif [ "$monitoring" == "-ge" ]; then
        sorted_column="$errs_column"
    elif [ "$invert" == "yes" ]; then
        sort_order="desc"
    fi

    # Realizar la monitorización de procesos para cada PID
    for pid in "${stopped_pids[@]}"; do
        # Llamada a strace en segundo plano para hacer el attach al PID
        trace_dir=".scdebug/traced_$pid"
        create_dir "$trace_dir"
        trace_file="$trace_dir/trace_$(uuidgen).txt"
        
        strace_command="strace -c -p $pid -o >(tee -a $trace_file)"

        # Iniciar strace en segundo plano
        eval "$strace_command" &

        # Hacer un sleep para dar tiempo a que strace complete el attach
        sleep 0.1

        # Activar la señal CONT en el proceso detenido
        kill -SIGCONT "$pid"
        
    done


fi


